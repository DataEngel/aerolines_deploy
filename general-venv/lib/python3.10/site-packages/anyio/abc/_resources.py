<<<<<<< HEAD
from __future__ import annotations

from abc import ABCMeta, abstractmethod
from types import TracebackType
from typing import TypeVar
=======
from abc import ABCMeta, abstractmethod
from types import TracebackType
from typing import Optional, Type, TypeVar
>>>>>>> dev

T = TypeVar("T")


class AsyncResource(metaclass=ABCMeta):
    """
    Abstract base class for all closeable asynchronous resources.

<<<<<<< HEAD
    Works as an asynchronous context manager which returns the instance itself on enter,
    and calls :meth:`aclose` on exit.
    """

    __slots__ = ()

=======
    Works as an asynchronous context manager which returns the instance itself on enter, and calls
    :meth:`aclose` on exit.
    """

>>>>>>> dev
    async def __aenter__(self: T) -> T:
        return self

    async def __aexit__(
        self,
<<<<<<< HEAD
        exc_type: type[BaseException] | None,
        exc_val: BaseException | None,
        exc_tb: TracebackType | None,
=======
        exc_type: Optional[Type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
>>>>>>> dev
    ) -> None:
        await self.aclose()

    @abstractmethod
    async def aclose(self) -> None:
        """Close the resource."""
