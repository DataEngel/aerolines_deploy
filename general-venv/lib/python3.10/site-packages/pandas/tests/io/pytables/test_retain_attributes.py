import pytest

<<<<<<< HEAD
from pandas import (
    DataFrame,
    DatetimeIndex,
=======
from pandas._libs.tslibs import Timestamp

from pandas import (
    DataFrame,
>>>>>>> dev
    Series,
    _testing as tm,
    date_range,
    errors,
    read_hdf,
)
from pandas.tests.io.pytables.common import (
    _maybe_remove,
    ensure_clean_store,
)

pytestmark = pytest.mark.single_cpu


<<<<<<< HEAD
def test_retain_index_attributes(setup_path, unit):
    # GH 3499, losing frequency info on index recreation
    dti = date_range("2000-1-1", periods=3, freq="h", unit=unit)
    df = DataFrame({"A": Series(range(3), index=dti)})
=======
def test_retain_index_attributes(setup_path):
    # GH 3499, losing frequency info on index recreation
    df = DataFrame(
        {"A": Series(range(3), index=date_range("2000-1-1", periods=3, freq="H"))}
    )
>>>>>>> dev

    with ensure_clean_store(setup_path) as store:
        _maybe_remove(store, "data")
        store.put("data", df, format="table")

        result = store.get("data")
        tm.assert_frame_equal(df, result)

        for attr in ["freq", "tz", "name"]:
            for idx in ["index", "columns"]:
                assert getattr(getattr(df, idx), attr, None) == getattr(
                    getattr(result, idx), attr, None
                )

<<<<<<< HEAD
        dti2 = date_range("2002-1-1", periods=3, freq="D", unit=unit)
        # try to append a table with a different frequency
        with tm.assert_produces_warning(errors.AttributeConflictWarning):
            df2 = DataFrame({"A": Series(range(3), index=dti2)})
=======
        # try to append a table with a different frequency
        with tm.assert_produces_warning(errors.AttributeConflictWarning):
            df2 = DataFrame(
                {
                    "A": Series(
                        range(3), index=date_range("2002-1-1", periods=3, freq="D")
                    )
                }
            )
>>>>>>> dev
            store.append("data", df2)

        assert store.get_storer("data").info["index"]["freq"] is None

        # this is ok
        _maybe_remove(store, "df2")
<<<<<<< HEAD
        dti3 = DatetimeIndex(
            ["2001-01-01", "2001-01-02", "2002-01-01"], dtype=f"M8[{unit}]"
        )
=======
>>>>>>> dev
        df2 = DataFrame(
            {
                "A": Series(
                    range(3),
<<<<<<< HEAD
                    index=dti3,
=======
                    index=[
                        Timestamp("20010101"),
                        Timestamp("20010102"),
                        Timestamp("20020101"),
                    ],
>>>>>>> dev
                )
            }
        )
        store.append("df2", df2)
<<<<<<< HEAD
        dti4 = date_range("2002-1-1", periods=3, freq="D", unit=unit)
        df3 = DataFrame({"A": Series(range(3), index=dti4)})
=======
        df3 = DataFrame(
            {"A": Series(range(3), index=date_range("2002-1-1", periods=3, freq="D"))}
        )
>>>>>>> dev
        store.append("df2", df3)


def test_retain_index_attributes2(tmp_path, setup_path):
    path = tmp_path / setup_path

    with tm.assert_produces_warning(errors.AttributeConflictWarning):
        df = DataFrame(
<<<<<<< HEAD
            {"A": Series(range(3), index=date_range("2000-1-1", periods=3, freq="h"))}
        )
        df.to_hdf(path, key="data", mode="w", append=True)
=======
            {"A": Series(range(3), index=date_range("2000-1-1", periods=3, freq="H"))}
        )
        df.to_hdf(path, "data", mode="w", append=True)
>>>>>>> dev
        df2 = DataFrame(
            {"A": Series(range(3), index=date_range("2002-1-1", periods=3, freq="D"))}
        )

<<<<<<< HEAD
        df2.to_hdf(path, key="data", append=True)

        idx = date_range("2000-1-1", periods=3, freq="h")
        idx.name = "foo"
        df = DataFrame({"A": Series(range(3), index=idx)})
        df.to_hdf(path, key="data", mode="w", append=True)

    assert read_hdf(path, key="data").index.name == "foo"

    with tm.assert_produces_warning(errors.AttributeConflictWarning):
        idx2 = date_range("2001-1-1", periods=3, freq="h")
        idx2.name = "bar"
        df2 = DataFrame({"A": Series(range(3), index=idx2)})
        df2.to_hdf(path, key="data", append=True)
=======
        df2.to_hdf(path, "data", append=True)

        idx = date_range("2000-1-1", periods=3, freq="H")
        idx.name = "foo"
        df = DataFrame({"A": Series(range(3), index=idx)})
        df.to_hdf(path, "data", mode="w", append=True)

    assert read_hdf(path, "data").index.name == "foo"

    with tm.assert_produces_warning(errors.AttributeConflictWarning):
        idx2 = date_range("2001-1-1", periods=3, freq="H")
        idx2.name = "bar"
        df2 = DataFrame({"A": Series(range(3), index=idx2)})
        df2.to_hdf(path, "data", append=True)
>>>>>>> dev

    assert read_hdf(path, "data").index.name is None
